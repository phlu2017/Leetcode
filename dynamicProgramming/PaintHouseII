// ori nk^2 -> record 1 min and 2 min nk

class Solution {
    public int minCostII(int[][] costs) {
        if(costs.length==0) return 0;
        int [][] dp = new int[costs.length][costs[0].length];
        //int curMin = Integer.MAX_VALUE;
        for(int i=0; i<dp[0].length; i++)
            dp[0][i] = costs[0][i];
        for(int i=1; i<dp.length; i++){
            for(int j=0; j<dp[0].length; j++){
                int curMin = Integer.MAX_VALUE;
                for(int k=0; k<dp[0].length; k++)
                    if(j!=k) curMin = Math.min(curMin, dp[i-1][k]);
                dp[i][j] = curMin + costs[i][j];
            }
        }
        int ans = Integer.MAX_VALUE;
        for(int i=0; i<dp[0].length; i++)
            ans = Math.min(ans, dp[costs.length-1][i]);
        return ans;
    }
}

class Solution {
    public int minCostII(int[][] costs) {
        if(costs.length==0) return 0;
        int [][] dp = new int[costs.length][costs[0].length];
        int firstMin = Integer.MAX_VALUE;
        int secondMin = Integer.MAX_VALUE;
        for(int i=0; i<dp[0].length; i++){
            dp[0][i] = costs[0][i];
            if(firstMin>dp[0][i]){
                secondMin = firstMin;
                firstMin = dp[0][i];
            }
            if(firstMin!=dp[0][i])
                secondMin = Math.min(secondMin, dp[0][i]);
        }
     
        for(int i=1; i<dp.length; i++){
            int newFirstMin = Integer.MAX_VALUE;
            int newSecondMin = Integer.MAX_VALUE;
            for(int j=0; j<dp[0].length; j++){
                if(dp[i-1][j] == firstMin)
                    dp[i][j] = secondMin + costs[i][j];
                else 
                    dp[i][j] = firstMin + costs[i][j];             
                if(newFirstMin>dp[i][j]){
                    newSecondMin = newFirstMin;
                    newFirstMin = dp[i][j];
                }
                if(newFirstMin!=dp[i][j])
                    newSecondMin = Math.min(newSecondMin, dp[i][j]);
            }
            firstMin = newFirstMin;
            secondMin = newSecondMin;
        }
        int ans = Integer.MAX_VALUE;
        for(int i=0; i<dp[0].length; i++)
            ans = Math.min(ans, dp[costs.length-1][i]);
        return ans;
    }
}
