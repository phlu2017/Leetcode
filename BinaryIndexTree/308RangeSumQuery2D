class NumMatrix {
    int[][] BIT;
    int[][] matrix;
    int n;
    int m;
    public NumMatrix(int[][] matrix) {
        if(matrix.length==0||matrix[0].length==0)
            return;
        this.matrix = matrix;
        n = matrix.length;
        m = matrix[0].length;
        BIT = new int[n+1][m+1];
        for(int i=0 ; i<n; i++){
            for(int j=0; j<m; j++)
                SelfUpdate(i, j, matrix[i][j]); 
        }
    }
    public void SelfUpdate(int row, int col, int val){
        //int dif = matirx[i][j] - val;
        //matirx[i][j] = val;
        for(int i=row+1; i<=n; i+=i&(-i)){
            for(int j=col+1; j<=m; j+=j&(-j)){
                BIT[i][j] += val;
            }
        }
    }
    
    public void update(int row, int col, int val) {
        int dif = val - matrix[row][col];
        matrix[row][col] = val;
        SelfUpdate(row, col, dif);
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        return countSum(row2, col2) + countSum(row1-1, col1-1) - countSum(row1-1, col2) - countSum(row2, col1-1);
    }
    public int countSum(int row, int col){
        int sum = 0;
        for( int i=row+1; i>0; i-=i&(-i)){
            for( int j=col+1; j>0; j-= j&(-j)){
                sum += BIT[i][j];
            }   
        }
        return sum;
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * obj.update(row,col,val);
 * int param_2 = obj.sumRegion(row1,col1,row2,col2);
 */
